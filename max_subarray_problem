#Kadane's algorithm to find the maximum subarry

#prices[1:] creates a new array in place, so it starts from index 0, and to handle that had to add 1 while chanding the value of start and end


def max_sub_array(prices):
    maxCur = maxSoFar = prices[0]
    start = 0
    end = 0
    for i,x in enumerate(prices[1:]): 
        if x > x+maxCur:
            maxCur = x
            start = i+1
        else:
            maxCur = maxCur + x
        if maxCur > maxSoFar:
            maxSoFar = maxCur
            end = i+1
    return maxSoFar,start,end




assert max_sub_array([1,2,3,-7,8,9,-10,2]) == (17,4,5)
assert max_sub_array([-99,-98,-9,-6,-4,-1]) == (-1,5,5)
assert max_sub_array([100,110,120,130,140,150]) == (750,0,5)
assert max_sub_array([0,0,0,0,0,0,0]) == (0,0,0)
assert max_sub_array([45,73,-10,33,-99]) == (141,0,3)
assert max_sub_array([45,73,200,33,-99]) == (351,0,3)
print "test cases passed"
    
